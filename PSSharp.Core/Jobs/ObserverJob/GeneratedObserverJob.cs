using PSSharp.Extensions;
using System;
using System.Management.Automation;
using System.Reactive.Linq;

namespace PSSharp
{
    /// <summary>
    /// A job to observe one or more <see cref="IObservable{T}"/> or <see cref="IPSObservable{T}"/> instances
    /// that are generated by an <see cref="IObservable{T}"/>.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    internal class GeneratedObserverJob<T> : ObserverJob
    {
        private readonly Action _start;
        private readonly object _generator;
        private IDisposable? _cancellation;
        private volatile bool _generatorFailed;
        public GeneratedObserverJob(string? command, string? name, ExecutionMode executionMode, IObservable<IObservable<T>> observableGenerator)
            : base(command, name, executionMode)
        {
            _generator = observableGenerator;
            _start = () =>
            {
                _cancellation = observableGenerator.Subscribe(
                    onNext: observable =>
                    {
                        Observe(observable);
                    },
                    onError: error =>
                    {
                        Error.Add(new ErrorRecord(
                            error,
                            "ObservableGeneratorError",
                            ErrorCategory.NotSpecified,
                            _generator));
                        _generatorFailed = true;
                        Seal();
                    },
                    onCompleted: () =>
                    {
                        Seal();
                    }
                    );
            };
        }
        public GeneratedObserverJob(string? command, string? name, ExecutionMode executionMode, IObservable<IPSObservable<T>> observableGenerator)
            : base(command, name, executionMode)
        {
            _generator = observableGenerator;
            _start = () =>
            {
                _cancellation = observableGenerator.Subscribe(
                    onNext: observable =>
                    {
                        Observe(observable);
                    },
                    onError: error =>
                    {
                        Error.Add(new ErrorRecord(
                            error,
                            "ObservableGeneratorError",
                            ErrorCategory.NotSpecified,
                            _generator));
                        _generatorFailed = true;
                        Seal();
                    },
                    onCompleted: () =>
                    {
                        Seal();
                    }
                    );
            };
        }
        public override void StartJob()
        {
            base.StartJob();
            _start();
        }
        public override void StopJob()
        {
            _cancellation?.Dispose();
            base.StopJob();
        }
        protected override JobState GetCompletionState()
        {
            if (_generatorFailed) return JobState.Failed;
            return base.GetCompletionState();
        }
    }
}
